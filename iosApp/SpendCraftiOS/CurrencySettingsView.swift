//
//  CurrencySettingsView.swift
//  SpendCraftiOS
//
//  Para Birimi AyarlarÄ±
//

import SwiftUI

struct Currency: Identifiable {
    let id: String
    let code: String
    let symbol: String
    let name: String
    let flag: String
    
    static let currencies: [Currency] = [
        Currency(id: "TRY", code: "TRY", symbol: "â‚º", name: "TÃ¼rk LirasÄ±", flag: "ðŸ‡¹ðŸ‡·"),
        Currency(id: "USD", code: "USD", symbol: "$", name: "Amerikan DolarÄ±", flag: "ðŸ‡ºðŸ‡¸"),
        Currency(id: "EUR", code: "EUR", symbol: "â‚¬", name: "Euro", flag: "ðŸ‡ªðŸ‡º"),
        Currency(id: "GBP", code: "GBP", symbol: "Â£", name: "Ä°ngiliz Sterlini", flag: "ðŸ‡¬ðŸ‡§"),
        Currency(id: "JPY", code: "JPY", symbol: "Â¥", name: "Japon Yeni", flag: "ðŸ‡¯ðŸ‡µ"),
        Currency(id: "CHF", code: "CHF", symbol: "Fr", name: "Ä°sviÃ§re FrangÄ±", flag: "ðŸ‡¨ðŸ‡­"),
        Currency(id: "CAD", code: "CAD", symbol: "C$", name: "Kanada DolarÄ±", flag: "ðŸ‡¨ðŸ‡¦"),
        Currency(id: "AUD", code: "AUD", symbol: "A$", name: "Avustralya DolarÄ±", flag: "ðŸ‡¦ðŸ‡º"),
        Currency(id: "CNY", code: "CNY", symbol: "Â¥", name: "Ã‡in YuanÄ±", flag: "ðŸ‡¨ðŸ‡³"),
        Currency(id: "RUB", code: "RUB", symbol: "â‚½", name: "Rus Rublesi", flag: "ðŸ‡·ðŸ‡º"),
        Currency(id: "SAR", code: "SAR", symbol: "ï·¼", name: "Suudi Arabistan Riyali", flag: "ðŸ‡¸ðŸ‡¦"),
        Currency(id: "AED", code: "AED", symbol: "Ø¯.Ø¥", name: "BAE Dirhemi", flag: "ðŸ‡¦ðŸ‡ª")
    ]
}

struct CurrencySettingsView: View {
    @Environment(\.dismiss) var dismiss
    @AppStorage("selectedCurrency") private var selectedCurrency: String = "TRY"
    @AppStorage("selectedCurrencySymbol") private var selectedCurrencySymbol: String = "â‚º"
    
    @State private var searchText = ""
    
    var filteredCurrencies: [Currency] {
        if searchText.isEmpty {
            return Currency.currencies
        } else {
            return Currency.currencies.filter { 
                $0.name.localizedCaseInsensitiveContains(searchText) ||
                $0.code.localizedCaseInsensitiveContains(searchText)
            }
        }
    }
    
    var body: some View {
        List {
            Section {
                ForEach(filteredCurrencies) { currency in
                    Button {
                        selectCurrency(currency)
                    } label: {
                        HStack(spacing: 16) {
                            Text(currency.flag)
                                .font(.system(size: 32))
                            
                            VStack(alignment: .leading, spacing: 4) {
                                Text(currency.name)
                                    .font(.subheadline)
                                    .fontWeight(.medium)
                                    .foregroundColor(.primary)
                                
                                Text("\(currency.code) (\(currency.symbol))")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            
                            Spacer()
                            
                            if selectedCurrency == currency.code {
                                Image(systemName: "checkmark.circle.fill")
                                    .foregroundColor(.blue)
                                    .font(.title3)
                            }
                        }
                        .padding(.vertical, 4)
                    }
                    .buttonStyle(.plain)
                }
            } header: {
                Text("KullanÄ±labilir Para Birimleri")
            } footer: {
                Text("SeÃ§tiÄŸiniz para birimi tÃ¼m uygulamada kullanÄ±lacaktÄ±r.")
            }
        }
        .navigationTitle("Para Birimi")
        .navigationBarTitleDisplayMode(.large)
        .searchable(text: $searchText, prompt: "Para birimi ara...")
    }
    
    private func selectCurrency(_ currency: Currency) {
        selectedCurrency = currency.code
        selectedCurrencySymbol = currency.symbol
        
        // Haptic feedback
        let generator = UIImpactFeedbackGenerator(style: .medium)
        generator.impactOccurred()
    }
}

#Preview {
    NavigationStack {
        CurrencySettingsView()
    }
}

